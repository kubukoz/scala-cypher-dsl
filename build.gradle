plugins {
    id 'maven'
    id 'signing'
    id 'scala'
    id 'idea'
    id "com.github.maiflai.scalatest" version "0.19"
    id "org.scoverage" version "2.5.0"
}

group 'me.manishkatoch'
version buildVersion

sourceCompatibility = 1.8

ext {
    scalaVersion = '2.11.9'
}
repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.scala-lang', name: 'scala-library', version: scalaVersion
    implementation group: 'org.scala-lang', name: 'scala-compiler', version: scalaVersion
    implementation group: 'org.scala-lang', name: 'scala-reflect', version: scalaVersion
    implementation group: 'com.chuusai', name: 'shapeless_2.11', version: '2.3.0'
    scoverage group: 'org.scoverage', name: 'scalac-scoverage-plugin_2.11', version: '1.3.1'
    scoverage group: 'org.scoverage', name: 'scalac-scoverage-runtime_2.11', version: '1.3.1'
    testImplementation group: 'org.scalatest', name: 'scalatest_2.11', version: '3.0.1'
    testRuntime 'org.pegdown:pegdown:1.4.2'
}
scoverage {
    excludedPackages = ["me.manishkatoch.scala.cypherDSL.spec.implicits"]
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
            task.enabled = false
        }
    }
}

signing {
    sign configurations.archives
}

task scaladocJar(type: Jar, dependsOn: scaladoc) {
    classifier = 'javadoc'
    from "${project.buildDir}/docs/scaladoc"
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives scaladocJar
    archives sourceJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
                }
            repository(url: maven2_url) {
                authentication(userName: mavenRepositoryUsername, password: mavenRepositoryPassword)
            }
            snapshotRepository(url: snapshot_url) {
                authentication(userName: mavenRepositoryUsername, password: mavenRepositoryPassword)
            }
            pom.project {
                        name project_name
                        packaging 'jar'
                        description project_description
                        url project_url
                        scm {
                            connection project_scm
                            developerConnection project_scm
                            url project_url
                        }
                        licenses {
                            license {
                                name project_license_slug
                                url project_license_url
                            }
                        }
                        developers {
                            developer {
                                id project_developer
                                name project_developer_name
                            }
                        }
                    }
            }
}
}