plugins {
    id 'maven'
    id 'signing'
    id 'scala'
    id 'idea'
    id "com.github.maiflai.scalatest" version "0.19"
    id "org.scoverage" version "2.5.0"
}

group 'me.manishkatoch'

sourceCompatibility = 1.8

ext {
    scalaVersion = '2.11.9'
    mavenUrl = project.properties.getOrDefault('maven2_url', System.getenv("MVN_URL"))
    snapshot_url = project.properties.getOrDefault('snapshot_url', System.getenv("MVN_SNAPSHOT_URL"))
    mavenRepositoryUsername = project.properties.getOrDefault('mavenRepositoryUsername', System.getenv("MVN_USERNAME"))
    mavenRepositoryPassword = project.properties.getOrDefault('mavenRepositoryPassword', System.getenv("MVN_PASSWORD"))
    build_version = project.properties.getOrDefault('buildVersion', System.getenv("BUILD_VERSION"))
}

version build_version

repositories {
    mavenCentral()
}

def isRunningOnTravis = System.getenv("CI") == "true"

dependencies {
    implementation group: 'org.scala-lang', name: 'scala-library', version: scalaVersion
    implementation group: 'org.scala-lang', name: 'scala-compiler', version: scalaVersion
    implementation group: 'org.scala-lang', name: 'scala-reflect', version: scalaVersion
    implementation group: 'com.chuusai', name: 'shapeless_2.11', version: '2.3.0'
    scoverage group: 'org.scoverage', name: 'scalac-scoverage-plugin_2.11', version: '1.3.1'
    scoverage group: 'org.scoverage', name: 'scalac-scoverage-runtime_2.11', version: '1.3.1'
    testImplementation group: 'org.scalatest', name: 'scalatest_2.11', version: '3.0.1'
    testRuntime 'org.pegdown:pegdown:1.4.2'
}
scoverage {
    excludedPackages = ["me.manishkatoch.scala.cypherDSL.spec.implicits"]
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
        allprojects {
            if (isRunningOnTravis) {
                ext."signing.secretKeyRingFile" = file("./secure.gpg")
            } else {
                ext."signing.secretKeyRingFile" = "./secure.gpg"
            }
        }

        allprojects { 
        ext."signing.password" = System.getenv('GPG_PASSPHRASE')
        printf("%s", ext."signing.password")
        printf("%s", ext."signing.keyId")

        }
    }
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
        tasks.findAll {
            it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar'
        }.each { task ->
            task.enabled = false
        }
    }
}

signing {
    sign configurations.archives
}

task scaladocJar(type: Jar, dependsOn: scaladoc) {
    classifier = 'javadoc'
    from "${project.buildDir}/docs/scaladoc"
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives scaladocJar
    archives sourceJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            repository(url: mavenUrl) {
                authentication(userName: mavenRepositoryUsername, password: mavenRepositoryPassword)
            }
            snapshotRepository(url: snapshot_url) {
                authentication(userName: mavenRepositoryUsername, password: mavenRepositoryPassword)
            }
            pom.project {
                name 'Scala Cypher DSL'
                packaging 'jar'
                description 'A type safe DSL for writing Cypher Query Language in Scala.'
                url 'https://github.com/manishkkatoch/scala-cypher-dsl'
                scm {
                    connection 'scm:git:https://github.com/manishkkatoch/scala-cypher-dsl.git'
                    developerConnection 'scm:git:https://github.com/manishkkatoch/scala-cypher-dsl.git'
                    url 'https://github.com/manishkkatoch/scala-cypher-dsl'
                }
                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/manishkkatoch/scala-cypher-dsl/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id 'manishkatoch'
                        name 'Manish Katoch'
                    }
                }
            }
        }
    }
}
